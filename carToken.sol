
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract carToken {


    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();
    
    }

        struct Car  {
            string name;
            string color;
            uint power;
            uint price;
            
           

        }

        Car[] carArr;

        mapping (uint=>uint) carToOwner;
        

        

        function createToken(string name, string color, uint power) public {
            tvm.accept();
            for (uint256 i = 0; i < carArr.length; i++) {
                require(carArr[i].name != name, 100);
            }
            carArr.push(Car(name, color, power, 0));
            uint arrKey = carArr.length - 1;
            carToOwner[arrKey] = msg.pubkey();
            
        }

        function tokenSale(uint tokenId, uint price) public {
            tvm.accept();
            carArr[tokenId].price = price;

        }




        

        




            

        




  
}
